{"searchDocs":[{"title":"Arg","type":0,"sectionRef":"#","url":"/Toasty/api/Arg","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Arg","url":"/Toasty/api/Arg#functions","content":" ","version":null,"tagName":"h2"},{"title":"string​","type":1,"pageTitle":"Arg","url":"/Toasty/api/Arg#string","content":"&lt;/&gt; Arg.string(arg: any) → boolean   ","version":null,"tagName":"h3"},{"title":"number​","type":1,"pageTitle":"Arg","url":"/Toasty/api/Arg#number","content":"&lt;/&gt; Arg.number(arg: any) → boolean  ","version":null,"tagName":"h3"},{"title":"Bootstrap","type":0,"sectionRef":"#","url":"/Toasty/api/Bootstrap","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#functions","content":" ","version":null,"tagName":"h2"},{"title":"LoadModules​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#LoadModules","content":"&lt;/&gt; Bootstrap.LoadModules( parent: Instance , recursive: boolean ) → () Calls require on all modules scripts parented under the passed parent instance  ","version":null,"tagName":"h3"},{"title":"LoadSingletonModules​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#LoadSingletonModules","content":"&lt;/&gt; Bootstrap.LoadSingletonModules( parent: Instance , recursive: boolean ) → () Calls require on all ModuleScript instances parented under the passed parant. It also creates singletons for every module meaning you can use this to avoid having to write Toasty.Service()/Toasty.Controller() in every module.  ","version":null,"tagName":"h3"},{"title":"Toast​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#Toast","content":"&lt;/&gt; Bootstrap.Toast() → () Starts up Toasty by calling dispatching OnInit and OnStart lifecycles ","version":null,"tagName":"h3"},{"title":"ClientEvent","type":0,"sectionRef":"#","url":"/Toasty/api/ClientEvent","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#new","content":"&lt;/&gt; ClientEvent.new(instance: RemoteEvent ) → ClientEvent   ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#Fire","content":"&lt;/&gt; ClientEvent:Fire(...: any) → () Fires the underlying event to the server  ","version":null,"tagName":"h3"},{"title":"AddMiddleware​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#AddMiddleware","content":"since v1.1.0 &lt;/&gt; ClientEvent:AddMiddleware(fn: MiddlewareFn) → () Add a middleware function to run after the event is fired  ","version":null,"tagName":"h3"},{"title":"SetCallback​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#SetCallback","content":"&lt;/&gt; ClientEvent:SetCallback( expects: {TypeCheckFunc},-- What is expected from the server callback: (...any) → () ) → Connection Sets the callback for the event.  ","version":null,"tagName":"h3"},{"title":"Predict​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#Predict","content":"&lt;/&gt; ClientEvent:Predict(...: any) → () Fires an event from the client to client, this would be the same as firing a BindableEvent ","version":null,"tagName":"h3"},{"title":"ClientFunction","type":0,"sectionRef":"#","url":"/Toasty/api/ClientFunction","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ClientFunction","url":"/Toasty/api/ClientFunction#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ClientFunction","url":"/Toasty/api/ClientFunction#new","content":"&lt;/&gt; ClientFunction.new(instance: RemoteEvent ) → ClientFunction   ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"ClientFunction","url":"/Toasty/api/ClientFunction#Fire","content":"&lt;/&gt; ClientFunction:Fire( expects: {TypeCheckFunc},-- What is expected to be returned from the server ...: any ) → Promise  Invokes the underlying event to the server and wraps it in a promise which resolves with whatever the server returns. ","version":null,"tagName":"h3"},{"title":"Connection","type":0,"sectionRef":"#","url":"/Toasty/api/Connection","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"/Toasty/api/Connection#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Connection","url":"/Toasty/api/Connection#new","content":"&lt;/&gt; Connection.new(conn: RBXScriptConnection ) → ()   ","version":null,"tagName":"h3"},{"title":"Disconnect​","type":1,"pageTitle":"Connection","url":"/Toasty/api/Connection#Disconnect","content":"&lt;/&gt; Connection:Disconnect() → ()  ","version":null,"tagName":"h3"},{"title":"LifecycleManager","type":0,"sectionRef":"#","url":"/Toasty/api/LifecycleManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"LifecycleManager","url":"/Toasty/api/LifecycleManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"Create​","type":1,"pageTitle":"LifecycleManager","url":"/Toasty/api/LifecycleManager#Create","content":"&lt;/&gt; LifecycleManager.Create( name: string, handler: LifecycleHandler? ) → Lifecycle Create a new lifecycle event. Creating it via the manager makes the passing a handler optional as it provides one by default. ","version":null,"tagName":"h3"},{"title":"Flags","type":0,"sectionRef":"#","url":"/Toasty/api/Flags","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#types","content":" ","version":null,"tagName":"h2"},{"title":"Flag​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#Flag","content":"&lt;/&gt; type Flag = string   ","version":null,"tagName":"h3"},{"title":"PossibleFlags​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#PossibleFlags","content":"&lt;/&gt; interface PossibleFlags { Verbose: Flag FlatNetworkStructure: Flag WarnOnMiddlewareError: Flag }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#properties","content":" ","version":null,"tagName":"h2"},{"title":"Flags​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#Flags","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Flags.Flags: PossibleFlags  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#functions","content":" ","version":null,"tagName":"h2"},{"title":"Enable​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#Enable","content":"&lt;/&gt; Flags.Enable(flag: Flag) → ()   ","version":null,"tagName":"h3"},{"title":"Disable​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#Disable","content":"&lt;/&gt; Flags.Disable(flag: Flag) → ()   ","version":null,"tagName":"h3"},{"title":"IsEnabled​","type":1,"pageTitle":"Flags","url":"/Toasty/api/Flags#IsEnabled","content":"&lt;/&gt; Flags.IsEnabled(flag: Flag) → ()  ","version":null,"tagName":"h3"},{"title":"InstanceManager","type":0,"sectionRef":"#","url":"/Toasty/api/InstanceManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"GetEventServer​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetEventServer","content":"&lt;/&gt; InstanceManager.GetEventServer( name: string, unreliable: boolean ) → RemoteEvent    ","version":null,"tagName":"h3"},{"title":"GetFunctionServer​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetFunctionServer","content":"&lt;/&gt; InstanceManager.GetFunctionServer( name: string, unreliable: boolean ) → RemoteFunction    ","version":null,"tagName":"h3"},{"title":"GetEventClient​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetEventClient","content":"&lt;/&gt; InstanceManager.GetEventClient(name: string) → RemoteEvent    ","version":null,"tagName":"h3"},{"title":"GetFunctionClient​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetFunctionClient","content":"&lt;/&gt; InstanceManager.GetFunctionClient(name: string) → RemoteFunction   ","version":null,"tagName":"h3"},{"title":"ServerFunction","type":0,"sectionRef":"#","url":"/Toasty/api/ServerFunction","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#new","content":"&lt;/&gt; ServerFunction.new(instance: RemoteEvent ) → ServerFunction   ","version":null,"tagName":"h3"},{"title":"SetCallback​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#SetCallback","content":"&lt;/&gt; ServerFunction:SetCallback( expects: {TypeCheckFunc},-- What is expected from the client callback: ( player: Player , ...any ) → () ) → Connection Sets the callback for the event.  ","version":null,"tagName":"h3"},{"title":"AddMiddleware​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#AddMiddleware","content":"since v1.1.0 &lt;/&gt; ServerFunction:AddMiddleware(fn: MiddlewareFn) → () Adds a new middleware function to run when the function is fired  ","version":null,"tagName":"h3"},{"title":"Predict​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#Predict","content":"&lt;/&gt; ServerFunction:Predict( Player: player, ...: any ) → () Fire a function from the server to the server as a player. ","version":null,"tagName":"h3"},{"title":"Lifecycle","type":0,"sectionRef":"#","url":"/Toasty/api/Lifecycle","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#properties","content":" ","version":null,"tagName":"h2"},{"title":"Name​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Lifecycle.Name: string Name of the lifecycle ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#new","content":"&lt;/&gt; Lifecycle.new( name: string,-- Name of the lifecycle event handler: LifecycleHandler ) → Lifecycle Create a new lifecycle event  ","version":null,"tagName":"h3"},{"title":"Dispatch​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#Dispatch","content":"&lt;/&gt; Lifecycle:Dispatch( ...: any-- Args to pass to all singletons which implement this lifecycle event ) → () Dispatch the lifecycle event with some arguments which are passed all singletons which implement this lifecycle event. ","version":null,"tagName":"h3"},{"title":"SingletonManager","type":0,"sectionRef":"#","url":"/Toasty/api/SingletonManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"SingletonManager","url":"/Toasty/api/SingletonManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"Create​","type":1,"pageTitle":"SingletonManager","url":"/Toasty/api/SingletonManager#Create","content":"&lt;/&gt; SingletonManager.Create(options: SingletonOptions) → Singleton Creates a new singelton  ","version":null,"tagName":"h3"},{"title":"GetAll​","type":1,"pageTitle":"SingletonManager","url":"/Toasty/api/SingletonManager#GetAll","content":"&lt;/&gt; SingletonManager.GetAll() → {Singleton} Returns an array of all singletons created ","version":null,"tagName":"h3"},{"title":"Networking","type":0,"sectionRef":"#","url":"/Toasty/api/Networking","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#types","content":" ","version":null,"tagName":"h2"},{"title":"EventReturn​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#EventReturn","content":"&lt;/&gt; interface EventReturn { Client: ClientEvent Server: ServerEvent }   ","version":null,"tagName":"h3"},{"title":"FunctionReturn​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#FunctionReturn","content":"&lt;/&gt; interface FunctionReturn { Client: ClientFunction Server: ServerFunction }   ","version":null,"tagName":"h3"},{"title":"TypeCheckFunc​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#TypeCheckFunc","content":"&lt;/&gt; type TypeCheckFunc = (...any) → ( boolean, string? )   ","version":null,"tagName":"h3"},{"title":"EventTable​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#EventTable","content":"&lt;/&gt; interface EventTable { Instance: RemoteEvent | RemoteFunction | nil Inputs: {TypeCheckFunc} Outputs: {TypeCheckFunc} }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#functions","content":" ","version":null,"tagName":"h2"},{"title":"Event​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#Event","content":"&lt;/&gt; Networking.Event() → EventReturn Create an event which allows for one-way communication between the server and client(s).  ","version":null,"tagName":"h3"},{"title":"UnreliableEvent​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#UnreliableEvent","content":"&lt;/&gt; Networking.UnreliableEvent() → EventReturn Create an event which allows for one-way communication between the server and client(s).  ","version":null,"tagName":"h3"},{"title":"Function​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#Function","content":"&lt;/&gt; Networking.Function() → FunctionReturn Create an event which allows for two-way communication between the server and client(s).  ","version":null,"tagName":"h3"},{"title":"UnreliableFunction​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#UnreliableFunction","content":"&lt;/&gt; Networking.UnreliableFunction() → FunctionReturn Create an event which allows for two-way communication between the server and client(s).  ","version":null,"tagName":"h3"},{"title":"Setup​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#Setup","content":"&lt;/&gt; Networking.Setup(module: ModuleScript ) → () Takes in a module script that contains a table of events and functions and conerts it into objects.  ","version":null,"tagName":"h3"},{"title":"SetupFromModule​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#SetupFromModule","content":"deprecated in v1.0.0 &lt;/&gt; This was deprecated in v1.0.0 Use `.Setup()` instead Networking.SetupFromModule(module: ModuleScript ) → () Takes in a module script that contains a table of events and functions and conerts it into objects. ","version":null,"tagName":"h3"},{"title":"ServerEvent","type":0,"sectionRef":"#","url":"/Toasty/api/ServerEvent","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#new","content":"&lt;/&gt; ServerEvent.new(instance: RemoteEvent ) → ServerEvent   ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#Fire","content":"&lt;/&gt; ServerEvent:Fire( player: Player , ...: any ) → ()   ","version":null,"tagName":"h3"},{"title":"FirePlayers​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#FirePlayers","content":"&lt;/&gt; ServerEvent:FirePlayers( players: {Player }, ...: any ) → ()   ","version":null,"tagName":"h3"},{"title":"Broadcast​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#Broadcast","content":"&lt;/&gt; ServerEvent:Broadcast(...: any) → ()   ","version":null,"tagName":"h3"},{"title":"AddMiddleware​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#AddMiddleware","content":"since v1.1.0 &lt;/&gt; ServerEvent:AddMiddleware(fn: MiddlewareFn) → () Adds a new middleware function to run when the event is fired  ","version":null,"tagName":"h3"},{"title":"SetCallback​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#SetCallback","content":"&lt;/&gt; ServerEvent:SetCallback( expects: {TypeCheckFunc},-- What is expected from the client callback: ( player: Player , ...any ) → () ) → Connection Sets the callback for the event.  ","version":null,"tagName":"h3"},{"title":"Predict​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#Predict","content":"&lt;/&gt; ServerEvent:Predict( player: Player , ...: any ) → () Fire an event from server to the server as a player ","version":null,"tagName":"h3"},{"title":"Guide","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/","content":"Guide This section is a guide intended for first timers using Toasty going over every feature that Toasty has.","keywords":"","version":"Next"},{"title":"Types","type":0,"sectionRef":"#","url":"/Toasty/api/Types","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#types","content":" ","version":null,"tagName":"h2"},{"title":"Singleton​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#Singleton","content":"&lt;/&gt; interface Singleton { Implements: {string} Dependencies: {Singleton} LoadOrder: number }   ","version":null,"tagName":"h3"},{"title":"SingletonOptions​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#SingletonOptions","content":"&lt;/&gt; interface SingletonOptions { Implements: {string}? Dependencies: {Singleton}? LoadOrder: number? }   ","version":null,"tagName":"h3"},{"title":"LifecycleHandler​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#LifecycleHandler","content":"&lt;/&gt; type LifecycleHandler = ( singletons: {Singleton}, name: string, ...any ) → ()   ","version":null,"tagName":"h3"},{"title":"Marker​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#Marker","content":"&lt;/&gt; type Marker = {}   ","version":null,"tagName":"h3"},{"title":"MiddlewareFn​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#MiddlewareFn","content":"since v1.1.0 &lt;/&gt; type MiddlewareFn = ( deny: Marker, next: Marker, args: {[number]: any} ) → Marker The Args table is the Args that are passed to the event callback. Any modifications to these are retained to the next middleware and eventually to the callback. ","version":null,"tagName":"h3"},{"title":"Toasty","type":0,"sectionRef":"#","url":"/Toasty/api/Toasty","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#properties","content":" ","version":null,"tagName":"h2"},{"title":"Bootstrap​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Bootstrap","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Toasty.Bootstrap: Bootstrap   ","version":null,"tagName":"h3"},{"title":"Networking​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Networking","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Toasty.Networking: Networking   ","version":null,"tagName":"h3"},{"title":"Flags​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Flags","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Toasty.Flags: Flags  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#functions","content":" ","version":null,"tagName":"h2"},{"title":"Service​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Service","content":"&lt;/&gt; Toasty.Service(options: SingletonOptions) → Singleton Creates a new singleton through the SingletonManager  ","version":null,"tagName":"h3"},{"title":"Controller​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Controller","content":"&lt;/&gt; Toasty.Controller(options: SingletonOptions) → Singleton Creates a new singleton through the SingletonManager  ","version":null,"tagName":"h3"},{"title":"Lifecycle.Create​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Lifecycle.Create","content":"&lt;/&gt; Toasty.Lifecycle.Create( name: string, handler: LifecycleHandler? ) → Lifecycle Create a new lifecycle event via the LifecycleManager Here is am exmaple of a custom OnHeartbeat lifecycle -- Services/HeartbeatLifecycleService local RunService = game:GetService(&quot;RunService&quot;) local Toasty = require(path.to.Toasty) local HeartbeatLifecycleService = { Implements = { &quot;OnStart&quot; } } function HeartbeatLifecycleService:OnStart() local heartbeatLifecycle = Toasty.Lifecycle.Create(&quot;OnHeartbeat&quot;) RunService.Heartbeat:Connect(function(deltaTime) heartbeatLifecycle:Dispatch(deltaTime) end) end return HeartbeatLifecycleService -- Services/MyService.luau local MyFirstService = { Implements = { &quot;OnHeartbeat&quot; }; } --[[ Add in the function wich gets called when the lifecycle is dispatched ]] function MyFirstService:OnHeartbeat(deltaTime: number) print(&quot;Heartbeat, dt =&quot;, deltaTime) end return MyFirstService  ","version":null,"tagName":"h3"},{"title":"Configuration","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Config","content":"","keywords":"","version":"Next"},{"title":"Toasty.Flags.Flags.Verbose​","type":1,"pageTitle":"Configuration","url":"/Toasty/docs/Guide/Config#toastyflagsflagsverbose","content":" Enables loggging for toasty to let you know exactly whats going on and when.  ","version":"Next","tagName":"h2"},{"title":"Toasty.Flags.Flags.FlatNetworkStructure​","type":1,"pageTitle":"Configuration","url":"/Toasty/docs/Guide/Config#toastyflagsflagsflatnetworkstructure","content":" When toasty creates your networking instances, they by default get put into folders which match to the same structure defined in your Network module. By turning this flag on Toasty just dumps all your network events into the remotes folder.  tip With this enabled events with the same name can still exist.  ","version":"Next","tagName":"h2"},{"title":"Toasty.Flags.Flags.WarnOnMiddlewareError​","type":1,"pageTitle":"Configuration","url":"/Toasty/docs/Guide/Config#toastyflagsflagswarnonmiddlewareerror","content":" tip Enabled by default in studio  When a middleware function errors, should Toasty actually let it error or should it warn instead. ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/GettingStarted","content":"","keywords":"","version":"Next"},{"title":"Installing​","type":1,"pageTitle":"Getting Started","url":"/Toasty/docs/Guide/GettingStarted#installing","content":" Toasty can be installed via 2 methods at the moment. Via Wally (package manager) or via a .rbxm file. Follow the below instructions for your preferred method.  ","version":"Next","tagName":"h2"},{"title":"Wally​","type":1,"pageTitle":"Getting Started","url":"/Toasty/docs/Guide/GettingStarted#wally","content":" Add the following to your wally.toml file:  [dependencies] Toasty = &quot;its-a-bit-random/toasty@1.1.0&quot;   and run  wally install   Make sure to sync your Packages folder with Rojo and your ready to go.  ","version":"Next","tagName":"h3"},{"title":"Roblox Studio: .rbxm​","type":1,"pageTitle":"Getting Started","url":"/Toasty/docs/Guide/GettingStarted#roblox-studio-rbxm","content":" If you want to use Toasty directly in Roblox Studio without Rojo or Wally you must first install the latest Toasty.rbxm from here.  Once tou have that downloaded drag and drop that file into studio and move the Packages folder into ReplicatedStorage.  This is the exact equivalent of doing the Wally install method but done for you and is intended to be used with non-rojo managed games. ","version":"Next","tagName":"h3"},{"title":"Dependencies","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Dependencies","content":"","keywords":"","version":"Next"},{"title":"Dependencies​","type":1,"pageTitle":"Dependencies","url":"/Toasty/docs/Guide/Dependencies#dependencies-1","content":" The Toasty dependency system is completely optional but is recommended since it ensures your singletons are loaded and started in the correct order.  To tell Toasty your singleton has a dependency on another singleton simply pass it into a dependencies table of your singleton. Example:  local MyOtherService = require(path.to.OtherService) local MyService = { Implements = { &quot;OnStart&quot; }; Dependencies = { MyOtherService }; } function MyService:OnStart() print(&quot;Hello World!&quot;) MyOtherService:Foo() end return MyService   Now toasty will call OnInit for MyOtherService before OnInit for MyService. Same with for OnStart.  ","version":"Next","tagName":"h2"},{"title":"Custom load order​","type":1,"pageTitle":"Dependencies","url":"/Toasty/docs/Guide/Dependencies#custom-load-order","content":" You can pass a custom load order into singletons using LoadOrder. By default all singletons are on load order 2. The higher the LoadOrder the later the singleton will load. If you want some singletons to always load before any other ones you can pass in a LoadOrder of 1.  warning Toasty puts priority on loading dependencies in the right order. So if your singleton has a LoadOrder of 2 and one of its dependencies has a LoadOrder = 3, that dependency will still be started before, ignoring the LoadOrder. At some point in the future this may become config to change how this works but for now this is how Toasty handles it. ","version":"Next","tagName":"h2"},{"title":"Toasty","type":0,"sectionRef":"#","url":"/Toasty/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installing​","type":1,"pageTitle":"Toasty","url":"/Toasty/docs/intro#installing","content":" ","version":"Next","tagName":"h2"},{"title":"Wally​","type":1,"pageTitle":"Toasty","url":"/Toasty/docs/intro#wally","content":" Add the following to your wally.toml  Toasty = &quot;its-a-bit-random/toasty@1.1.0&quot;   and run  wally install   tip If this is your first time using Toasty, please read through all of the docs. This will allow you to take full advantage of Toasty. ","version":"Next","tagName":"h3"},{"title":"Networking","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Networking","content":"","keywords":"","version":"Next"},{"title":"Benefits​","type":1,"pageTitle":"Networking","url":"/Toasty/docs/Guide/Networking#benefits","content":" Toasty's networking comes with a couple of features that native RemoteEvent and RemoteFunctions just don't have. Here is a list of all features that Toasty brings to networking:  RemoteFunctions emulated using RemoteEvents Allows for Unreliable RemoteFunction since ROBLOX doesn't have those Calling RemoteFunctions returns a promise instead of blocking  ","version":"Next","tagName":"h2"},{"title":"Setting up​","type":1,"pageTitle":"Networking","url":"/Toasty/docs/Guide/Networking#setting-up","content":" To get started you need to create a module script which describes the structure of your networking. This should be placed somewhere in ReplicatedStorage to allow both the Server and Client to access it.  -- ReplicatedStorage/Network.luau local Toasty = require(path.to.Toasty) local Net = Toasty.Networking -- Shorthand; not required return { MyEvent = Net.Event(); NestedStuff = { NestedFunction = Net.Function(); } }   We now need to tell toasty to actually create these events and setup everything for them. Lets go back to out Loader script:  -- Require -- local Toasty = require(path.to.toasty) -- Config -- --[[ This is where configs like Feature Flags will go ]] -- Networking -- Toasty.Networking.Setup(path.to.Network) -- This should be the actual ModuleScript! -- Loading -- -- Now we can load our actual modules Toasty.Bootstrap.LoadSingletonModules(script.Parent.Services, true) --[[ When using LoadSingletonModules, Toasty automatically handles creating and registering singletons. This means all your modules should return singletons, if not, please restructure or call Toasty.Service or Toasty.Controller in every module. Before returning ]] -- Toast -- -- Toasting is the same as calling Knit.Start(). It kicks off all singleton's OnStart and OnInit lifecycle (more info on that later) Toasty.Bootstrap.Toast()   Now our networking is setup and ready. This should be done before loading singletons and after setting config flags (explained next page).  Using this networking module is self explanatory so I wont go into it here. However you can refer to the API docs to get the specifics. However here are some key things to keep in mind.  The events/functions have a .Client and .Server API, you need to use the correct API depending on where you are using the event from. E.g. on the server use the .Server API and on the client use the .Client APIThe server cannot fire RemoteFunctions, I wont go into details here but the server should never get information from the client because the server should never trust from the client.The first argument when setting callbacks or firing remote functions is a table of type check functions to runtime-type-check networking, you can pass t.* into here or you can use Toasty.Networking.Args.* ","version":"Next","tagName":"h2"},{"title":"Hello World","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/HelloWorld","content":"Hello World Lets now write your very own Starter script. You will need to create one for both the client and server. This will only cover the server side but the client side is pretty much identical. Keep in mind that a &quot;Singleton&quot; is a way of saying &quot;Service&quot; or &quot;Controller&quot; since they are the same with just a different name on the Server and Client. -- Require -- local Toasty = require(path.to.toasty) -- Config -- --[[ This is where configs like Feature Flags will go ]] -- Networking -- --[[ This will be covered later when we go over networking ]] -- Loading -- -- Now we can load our actual modules Toasty.Bootstrap.LoadSingletonModules(script.Parent.Services, true) --[[ When using LoadSingletonModules, Toasty automatically handles creating and registering singletons. This means all your modules should return singletons, if not, please restructure or call Toasty.Service or Toasty.Controller in every module. Before returning ]] -- Toast -- -- Toasting is the same as calling Knit.Start(). It kicks off all singleton's OnStart and OnInit lifecycle (more info on that later) Toasty.Bootstrap.Toast() Now to create our actual Service. Create a folder next to your loader server script called &quot;Services&quot; and create a module script inside. -- Services/MyService.luau local MyFirstService = { Implements = { &quot;OnStart&quot; }; } function MyFirstService:OnStart() print(&quot;Hello World!&quot;) end return MyFirstService Ignore the implements table for now as we will go into Life-cycles in the next page. However running this you will get Hello World printing in console. Now its your turn, try doing the setup for the client and see if you can get that to print hello world too. Heads up though, on the client services are called Controllers!","keywords":"","version":"Next"},{"title":"Lifecycle","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Lifecycle","content":"Lifecycle In the example service given in the &quot;Hello World&quot; page you might have noticed a table called &quot;Implements&quot;. By default Toasty comes with OnInit and OnStart, this is where Toasty becomes really powerful, you can create and implement your own lifecycle functions. Lets create our own OnHeartbeat lifecycle and add it to our service from before. Firstly we need to create a new service for handling our lifecycle, note this doesn't have to be a service/controller nor does it need to be created straight away. Your lifecycle can be created however, wherever and whenever you like. -- Services/HeartbeatLifecycleService local RunService = game:GetService(&quot;RunService&quot;) local Toasty = require(path.to.Toasty) local HeartbeatLifecycleService = { Implements = { &quot;OnStart&quot; } } function HeartbeatLifecycleService:OnStart() local heartbeatLifecycle = Toasty.Lifecycle.Create(&quot;OnHeartbeat&quot;) RunService.Heartbeat:Connect(function(deltaTime) heartbeatLifecycle:Dispatch(deltaTime) end) end return HeartbeatLifecycleService When you create a lifecycle you pass a name, this is the name that you will pass into the Implements table of singletons. Anything you pass into :Dispatch() will also be passed to every singleton. tip You can also pass a custom function when creating a lifecycle to customize how the lifecycle is dispatched. You can see the default function here. And you can also see OnInit and OnStart here since they also use custom handlers. Lets now add this to our HelloWorld service from before. -- Services/MyService.luau local MyFirstService = { Implements = { &quot;OnStart&quot;, &quot;OnHeartbeat&quot; }; -- Add &quot;OnHeartbeat&quot; to our implements } --[[ Add in the function which gets called when the lifecycle is dispatched ]] function MyFirstService:OnHeartbeat(deltaTime: number) print(&quot;Heartbeat, dt =&quot;, deltaTime) end function MyFirstService:OnStart() print(&quot;Hello World!&quot;) end return MyFirstService Running this you should see that your service prints the delta time each frame. As always you can refer to the API docs to learn more about the inner workings of Lifecycles.","keywords":"","version":"Next"}],"options":{"id":"default"}}