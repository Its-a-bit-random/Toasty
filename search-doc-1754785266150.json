{"searchDocs":[{"title":"Arg","type":0,"sectionRef":"#","url":"/Toasty/api/Arg","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Arg","url":"/Toasty/api/Arg#functions","content":" ","version":null,"tagName":"h2"},{"title":"string​","type":1,"pageTitle":"Arg","url":"/Toasty/api/Arg#string","content":"&lt;/&gt; Arg.string(arg: any) → boolean   ","version":null,"tagName":"h3"},{"title":"number​","type":1,"pageTitle":"Arg","url":"/Toasty/api/Arg#number","content":"&lt;/&gt; Arg.number(arg: any) → boolean  ","version":null,"tagName":"h3"},{"title":"LifecycleManager","type":0,"sectionRef":"#","url":"/Toasty/api/LifecycleManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"LifecycleManager","url":"/Toasty/api/LifecycleManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"Create​","type":1,"pageTitle":"LifecycleManager","url":"/Toasty/api/LifecycleManager#Create","content":"&lt;/&gt; LifecycleManager.Create( name: string, handler: LifecycleHandler? ) → Lifecycle Create a new lifecycle event. Creating it via the manager makes the passing a handler optional as it provides one by default. ","version":null,"tagName":"h3"},{"title":"Networking","type":0,"sectionRef":"#","url":"/Toasty/api/Networking","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#types","content":" ","version":null,"tagName":"h2"},{"title":"TypeCheckFunc​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#TypeCheckFunc","content":"&lt;/&gt; type TypeCheckFunc = (...any) → ( boolean, string? )   ","version":null,"tagName":"h3"},{"title":"EventTable​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#EventTable","content":"&lt;/&gt; interface EventTable { Instance: RemoteEvent | RemoteFunction | nil Inputs: {TypeCheckFunc} Outputs: {TypeCheckFunc} }  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#functions","content":" ","version":null,"tagName":"h2"},{"title":"CreateEvent​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#CreateEvent","content":"&lt;/&gt; Networking.CreateEvent( inputs: {TypeCheckFunc}, outputs: {TypeCheckFunc} ) → EventReturn ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#EventReturn","content":"interface EventReturn { Client: ClientEvent Server: ServerEvent }  Create an event with given inputs and outputs that will be automatically type checked by Toasty.  ","version":null,"tagName":"h3"},{"title":"CreateFunction​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#CreateFunction","content":"&lt;/&gt; Networking.CreateFunction( inputs: {TypeCheckFunc}, outputs: {TypeCheckFunc} ) → FunctionReturn ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#FunctionReturn","content":"interface FunctionReturn { Client: ClientFunction Server: ServerFunction }  Create a function with given inputs and outputs that will be automatically type checked by Toasty.  ","version":null,"tagName":"h3"},{"title":"SetupFromModule​","type":1,"pageTitle":"Networking","url":"/Toasty/api/Networking#SetupFromModule","content":"&lt;/&gt; Networking.SetupFromModule(module: ModuleScript ) → () Takes in a module script that contains a table of events and functions and conerts it into objects. WARNING This is temporary and the need for this will be removed eventually. ","version":null,"tagName":"h3"},{"title":"InstanceManager","type":0,"sectionRef":"#","url":"/Toasty/api/InstanceManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"GetEventServer​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetEventServer","content":"&lt;/&gt; InstanceManager.GetEventServer( name: string, unreliable: boolean ) → RemoteEvent    ","version":null,"tagName":"h3"},{"title":"GetFunctionServer​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetFunctionServer","content":"&lt;/&gt; InstanceManager.GetFunctionServer( name: string, unreliable: boolean ) → RemoteFunction    ","version":null,"tagName":"h3"},{"title":"GetEventClient​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetEventClient","content":"&lt;/&gt; InstanceManager.GetEventClient(name: string) → RemoteEvent    ","version":null,"tagName":"h3"},{"title":"GetFunctionClient​","type":1,"pageTitle":"InstanceManager","url":"/Toasty/api/InstanceManager#GetFunctionClient","content":"&lt;/&gt; InstanceManager.GetFunctionClient(name: string) → RemoteFunction   ","version":null,"tagName":"h3"},{"title":"Bootstrap","type":0,"sectionRef":"#","url":"/Toasty/api/Bootstrap","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#functions","content":" ","version":null,"tagName":"h2"},{"title":"LoadModules​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#LoadModules","content":"&lt;/&gt; Bootstrap.LoadModules( parent: Instance , recursive: boolean ) → () Calls require on all modules scripts parented under the passed parent instance  ","version":null,"tagName":"h3"},{"title":"Toast​","type":1,"pageTitle":"Bootstrap","url":"/Toasty/api/Bootstrap#Toast","content":"&lt;/&gt; Bootstrap.Toast() → () Starts up Toasty by calling dispatching OnInit and OnStart lifecycles ","version":null,"tagName":"h3"},{"title":"SingletonManager","type":0,"sectionRef":"#","url":"/Toasty/api/SingletonManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"SingletonManager","url":"/Toasty/api/SingletonManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"Create​","type":1,"pageTitle":"SingletonManager","url":"/Toasty/api/SingletonManager#Create","content":"&lt;/&gt; SingletonManager.Create(options: SingletonOptions) → Singleton Creates a new singelton  ","version":null,"tagName":"h3"},{"title":"GetAll​","type":1,"pageTitle":"SingletonManager","url":"/Toasty/api/SingletonManager#GetAll","content":"&lt;/&gt; SingletonManager.GetAll() → {Singleton} Returns an array of all singletons created ","version":null,"tagName":"h3"},{"title":"ServerEvent","type":0,"sectionRef":"#","url":"/Toasty/api/ServerEvent","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#new","content":"&lt;/&gt; ServerEvent.new(instance: RemoteEvent ) → ServerEvent   ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#Fire","content":"&lt;/&gt; ServerEvent:Fire( player: Player , ...: any ) → ()   ","version":null,"tagName":"h3"},{"title":"FirePlayers​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#FirePlayers","content":"&lt;/&gt; ServerEvent:FirePlayers( players: {Player }, ...: any ) → ()   ","version":null,"tagName":"h3"},{"title":"Broadcast​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#Broadcast","content":"&lt;/&gt; ServerEvent:Broadcast(...: any) → ()   ","version":null,"tagName":"h3"},{"title":"SetCallback​","type":1,"pageTitle":"ServerEvent","url":"/Toasty/api/ServerEvent#SetCallback","content":"&lt;/&gt; ServerEvent:SetCallback( expects: {TypeCheckFunc},-- What is expected from the client callback: ( player: Player , ...any ) → () ) → () Sets the callback for the event. ","version":null,"tagName":"h3"},{"title":"Lifecycle","type":0,"sectionRef":"#","url":"/Toasty/api/Lifecycle","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#properties","content":" ","version":null,"tagName":"h2"},{"title":"Name​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#Name","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Lifecycle.Name: string Name of the lifecycle ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#new","content":"&lt;/&gt; Lifecycle.new( name: string,-- Name of the lifecycle event handler: LifecycleHandler ) → Lifecycle Create a new lifecycle event  ","version":null,"tagName":"h3"},{"title":"Dispatch​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/api/Lifecycle#Dispatch","content":"&lt;/&gt; Lifecycle:Dispatch( ...: any-- Args to pass to all singletons which implement this lifecycle event ) → () Dispatch the lifecycle event with some arguments which are passed all singletons which implement this lifecycle event. ","version":null,"tagName":"h3"},{"title":"Dependencies","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Dependencies","content":"","keywords":"","version":"Next"},{"title":"Defining Dependencies​","type":1,"pageTitle":"Dependencies","url":"/Toasty/docs/Guide/Dependencies#defining-dependencies","content":" With all that talk out of the way, how do we actually tell Toasty what our singletons depend on? It's very simple, have a look below:  -- ServiceA.luau local Toasty = require(path.to.toasty) local ServiceA = { Implements = { &quot;OnStart&quot; } } function ServiceA:SayHello() print(&quot;Hello from service a&quot;) end function ServiceA:OnStart() print(&quot;ServiceA::OnStart&quot;) end Toasty.Service(ServiceA) return ServiceA   -- ServiceB.luau local Toasty = require(path.to.toasty) local ServiceA = require(path.to.ServiceA) local ServiceB = { Implements = { &quot;OnStart&quot; }, Dependencies = { ServiceA }, -- Tell toasty that this service depends on ServiceA } function ServiceB:OnStart() print(&quot;ServiceB::OnStart&quot;) ServiceA:SayHello() end Toasty.Service(ServiceB) return ServiceB   If you ran this, you would see that the output would look something like this:  ServiceA::OnStart ServiceB::OnStart Hello from service a   note Keep in mind that still, all OnInit functions are called before any OnStart functions are called! ","version":"Next","tagName":"h2"},{"title":"ServerFunction","type":0,"sectionRef":"#","url":"/Toasty/api/ServerFunction","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#new","content":"&lt;/&gt; ServerFunction.new(instance: RemoteFunction ) → ServerFunction   ","version":null,"tagName":"h3"},{"title":"SetCallback​","type":1,"pageTitle":"ServerFunction","url":"/Toasty/api/ServerFunction#SetCallback","content":"&lt;/&gt; ServerFunction:SetCallback( expects: {TypeCheckFunc},-- What is expected from the client callback: ( player: Player , ...any ) → () ) → () Sets the callback for the event. ","version":null,"tagName":"h3"},{"title":"ClientEvent","type":0,"sectionRef":"#","url":"/Toasty/api/ClientEvent","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#new","content":"&lt;/&gt; ClientEvent.new(instance: RemoteEvent ) → ClientEvent   ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#Fire","content":"&lt;/&gt; ClientEvent:Fire(...: any) → () Fires the underlying event to the server  ","version":null,"tagName":"h3"},{"title":"SetCallback​","type":1,"pageTitle":"ClientEvent","url":"/Toasty/api/ClientEvent#SetCallback","content":"&lt;/&gt; ClientEvent:SetCallback( expects: {TypeCheckFunc},-- What is expected from the server callback: (...any) → () ) → RBXScriptConnection  Sets the callback for the event. ","version":null,"tagName":"h3"},{"title":"ClientFunction","type":0,"sectionRef":"#","url":"/Toasty/api/ClientFunction","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"ClientFunction","url":"/Toasty/api/ClientFunction#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"ClientFunction","url":"/Toasty/api/ClientFunction#new","content":"&lt;/&gt; ClientFunction.new(instance: RemoteFunction ) → ClientFunction   ","version":null,"tagName":"h3"},{"title":"Fire​","type":1,"pageTitle":"ClientFunction","url":"/Toasty/api/ClientFunction#Fire","content":"&lt;/&gt; ClientFunction:Fire( expects: {TypeCheckFunc},-- What is expected to be returned from the server ...: any ) → Promise  Invokes the underlying event to the server and wraps it in a promise which resolves with whatever the server returns. ","version":null,"tagName":"h3"},{"title":"Singletons","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Singletons","content":"","keywords":"","version":"Next"},{"title":"Creating a singleton​","type":1,"pageTitle":"Singletons","url":"/Toasty/docs/Guide/Singletons#creating-a-singleton","content":" local Toasty = require(path.to.Toasty) -- Server local myAwesomeService = {} Toasty.Service(myAwesomeService) return myAwesomeService -- Client local myAwesomeController = {} Toasty.Controller(myAwesomeController) return myAwesomeController   Yep, that's all you need to do to create a singleton, from here you can hook into Lifecycles. The empty table passed is a options table which can be used to configure the singleton like implementing lifecycle.  tip Although you can create singletons via Toasty it is recommended you do not, and do what above does and define your singleton, then pass it to Toasty via Service or Controller.  ","version":"Next","tagName":"h2"},{"title":"Lifecycle​","type":1,"pageTitle":"Singletons","url":"/Toasty/docs/Guide/Singletons#lifecycle","content":" We can implement lifecycle events by passing the name into the Implements table within the options table with all the lifecycle events we would like to get on this service. Learn more here  local Toasty = require(path.to.Toasty) local myAwesomeService = { Implements = { &quot;OnStart&quot; } } function myAwesomeService:OnStart() print(&quot;Hello World!&quot;) end Toasty.Service(myAwesomeService) return myAwesomeService  ","version":"Next","tagName":"h2"},{"title":"Toasty","type":0,"sectionRef":"#","url":"/Toasty/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installing​","type":1,"pageTitle":"Toasty","url":"/Toasty/docs/intro#installing","content":" warning Although Toasty is &quot;Production Ready&quot; it has not yet been battle-tested.  ","version":"Next","tagName":"h2"},{"title":"Wally​","type":1,"pageTitle":"Toasty","url":"/Toasty/docs/intro#wally","content":" Add the following to your wally.toml  Toasty = &quot;its-a-bit-random/toasty@1.0.0-pre.4&quot;   and run  wally install  ","version":"Next","tagName":"h3"},{"title":"Types","type":0,"sectionRef":"#","url":"/Toasty/api/Types","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#types","content":" ","version":null,"tagName":"h2"},{"title":"Singleton​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#Singleton","content":"&lt;/&gt; interface Singleton { Implements: {string} Dependencies: {Singleton} }   ","version":null,"tagName":"h3"},{"title":"SingletonOptions​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#SingletonOptions","content":"&lt;/&gt; interface SingletonOptions { Implements: {string}? Dependencies: {Singleton}? }   ","version":null,"tagName":"h3"},{"title":"LifecycleHandler​","type":1,"pageTitle":"Types","url":"/Toasty/api/Types#LifecycleHandler","content":"&lt;/&gt; type LifecycleHandler = ( singletons: {Singleton}, name: string, ...any ) → ()  ","version":null,"tagName":"h3"},{"title":"Toasty","type":0,"sectionRef":"#","url":"/Toasty/api/Toasty","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#properties","content":" ","version":null,"tagName":"h2"},{"title":"Bootstrap​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Bootstrap","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Toasty.Bootstrap: Bootstrap   ","version":null,"tagName":"h3"},{"title":"Networking​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Networking","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Toasty.Networking: Networking  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#functions","content":" ","version":null,"tagName":"h2"},{"title":"Service​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Service","content":"&lt;/&gt; Toasty.Service(options: SingletonOptions) → Singleton Creates a new singleton through the SingletonManager  ","version":null,"tagName":"h3"},{"title":"Controller​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Controller","content":"&lt;/&gt; Toasty.Controller(options: SingletonOptions) → Singleton Creates a new singleton through the SingletonManager  ","version":null,"tagName":"h3"},{"title":"Lifecycle.Create​","type":1,"pageTitle":"Toasty","url":"/Toasty/api/Toasty#Lifecycle.Create","content":"&lt;/&gt; Toasty.Lifecycle.Create( name: string, handler: LifecycleHandler? ) → Lifecycle Create a new lifecycle event via the LifecycleManager ","version":null,"tagName":"h3"},{"title":"Lifecycle","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Lifecycle","content":"","keywords":"","version":"Next"},{"title":"Hooking into lifecycle events​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/docs/Guide/Lifecycle#hooking-into-lifecycle-events","content":" To hook into a lifecycle event we need to tell Toasty what lifecycle events we would like to have on the service. We can do this by passing an Implements table into the options with the names of the lifecycles we want to have. E.g:  local Toasty = require(path.to.Toasty) local myAwesomeService = { Implements = { &quot;OnStart&quot; } } --[[ Lifecycles need to have a function with the same name to call when that event goes off. ]] function myAwesomeService:OnStart() print(&quot;Hello World!&quot;) end Toasty.Service(myAwesomeService) return myAwesomeService   ","version":"Next","tagName":"h2"},{"title":"Toasty provided events​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/docs/Guide/Lifecycle#toasty-provided-events","content":" ","version":"Next","tagName":"h2"},{"title":"OnStart​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/docs/Guide/Lifecycle#onstart","content":" OnStart is called when you call the Toasty.Bootstrap.Toast() function. E.g:  -- MyAwesomeService.luau local Toasty = require(path.to.Toasty) local myAwesomeService = { Implements = { &quot;OnStart&quot; } } function myAwesomeService:OnStart() print(&quot;Hello World!&quot;) end Toasty.Service(myAwesomeService) return myAwesomeService -- Runtime.server.luau Toasty.Bootstrap.Toast() -- would print &quot;Hello World!&quot;   ","version":"Next","tagName":"h3"},{"title":"OnInit​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/docs/Guide/Lifecycle#oninit","content":" warning You should not use OnInit unless you need to use the behavior that it has. Yielding in OnInit will delay calling Init/Start on all other singletons.  OnInit is called when you call the Toasty.Bootstrap.Toast() function but before the OnStart lifecycle. E.g:  -- MyAwesomeService.luau local Toasty = require(path.to.Toasty) local myAwesomeService = { Implements = { &quot;OnInit&quot;, &quot;OnStart&quot; } } function myAwesomeService:OnStart() print(&quot;Start&quot;) end function myAwesomeService:OnInit() print(&quot;Init&quot;) end Toasty.Service(myAwesomeService) return myAwesomeService -- Runtime.server.luau Toasty.Bootstrap.Toast() -- would print &quot;Init&quot; then &quot;Start&quot;   ","version":"Next","tagName":"h3"},{"title":"Creating Your own​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/docs/Guide/Lifecycle#creating-your-own","content":" You can create your own lifecycle events that get fired whenever you would like and do whatever you like. Here is a basic example of an OnHeartbeat lifecycle event which also passes the deltaTime with it.  local RunService = game:GetService(&quot;RunService&quot;) local Toasty = require(path.to.Toasty) -- Create our lifecycle local onHeartbeatLifecycle = Toasty.Lifecycle.Create(&quot;OnHeartbeat&quot;) RunService.Heartbeat:Connect(function(dt: number) -- Dispatch lifecycle passing in delta time onHeartbeatLifecycle:Dispatch(dt) end) -- MyService.luau local Toasty = require(path.to.Toasty) local myAwesomeService = { Implements = { &quot;OnHeartbeat&quot; } } function myAwesomeService:OnHeartbeat(dt: number) print(dt) end Toasty.Service(myAwesomeService) return myAwesomeService   ","version":"Next","tagName":"h2"},{"title":"Custom Handlers​","type":1,"pageTitle":"Lifecycle","url":"/Toasty/docs/Guide/Lifecycle#custom-handlers","content":" By default Toasty provides you with a handler for lifecycle events which just calls the function on each singleton which implements that lifecycle event using task.spawn. However you may want to do it your own way or add some logging, etc. You can do this by passing a handler function when you create your lifecycle event.  This example simply calls each function without task.spawn, the same way that OnInit lifecycle works  local RunService = game:GetService(&quot;RunService&quot;) local Toasty = require(path.to.Toasty) local onHeartbeatLifecycle = Toasty.Lifecycle.Create(&quot;OnHeartbeat&quot;, function(singletons, name: string, ...: any) for _, v in singletons do -- Toasty makes sure the singleton has the function -- so its safe to assume it exists here local func = v[name] func(v, ...) end end) RunService.Heartbeat:Connect(function(dt: number) onHeartbeatLifecycle:Dispatch(dt) end) -- MyService.luau local Toasty = require(path.to.Toasty) local myAwesomeService = { Implements = { &quot;OnHeartbeat&quot; } } function myAwesomeService:OnHeartbeat(dt: number) print(dt) end Toasty.Service(myAwesomeService) return myAwesomeService  ","version":"Next","tagName":"h3"},{"title":"Networking","type":0,"sectionRef":"#","url":"/Toasty/docs/Guide/Networking","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"Networking","url":"/Toasty/docs/Guide/Networking#getting-started","content":" warning Networking is subject to breaking changes constantly pre-1.0.0  You first need to create your Networking module. This is where you define all your events and functions. Here is an example:  -- Shared/Networking.luau local Toasty = require(path.to.toasty) local Net = Toasty.Networking -- Just a shorthand; not required return { -- Here we define a simple event MyEvent = Net.CreateEvent(), -- And a function MyFunction = Net.CreateFunction(), -- You can create namespaces by just adding a table MyNamespace = { MyNamespacedFunction = Net.CreateFunction(), } }   Once your networking module is ready you need to load it via toasty on both the client and the server:  -- Server/Main.server.luau local Toasty = require(path.to.toasty) Toasty.Networking.SetupFromModule(path.to.networking) -- Client/Main.client.luau local Toasty = require(path.to.toasty) Toasty.Networking.SetupFromModule(path.to.networking)   From here to use networking events you can simply require the networking module and access all the events and functions as you would expect.  tip SetCallback and Fire (Fire only applies to client firing functions to server) take in an expects table which can type check things for you. This is done like this to hide types for clients. It is recommended you use t or Toasty.Networking.Arg.* however you can create your own. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}