"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4135],{95127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Guide/Lifecycle","title":"Lifecycle","description":"Lifecycle events allow you to listen in to certain events from Toasty or by creating your own.","source":"@site/docs/Guide/Lifecycle.md","sourceDirName":"Guide","slug":"/Guide/Lifecycle","permalink":"/Toasty/docs/Guide/Lifecycle","draft":false,"unlisted":false,"editUrl":"https://github.com/Its-a-bit-random/Toasty/edit/main/docs/Guide/Lifecycle.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Singletons","permalink":"/Toasty/docs/Guide/Singletons"},"next":{"title":"Networking","permalink":"/Toasty/docs/Guide/Networking"}}');var i=t(74848),a=t(28453);const s={sidebar_position:2},c="Lifecycle",r={},l=[{value:"Hooking into lifecycle events",id:"hooking-into-lifecycle-events",level:2},{value:"Toasty provided events",id:"toasty-provided-events",level:2},{value:"OnStart",id:"onstart",level:3},{value:"OnInit",id:"oninit",level:3},{value:"Creating Your own",id:"creating-your-own",level:2},{value:"Custom Handlers",id:"custom-handlers",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"lifecycle",children:"Lifecycle"})}),"\n",(0,i.jsx)(n.p,{children:"Lifecycle events allow you to listen in to certain events from Toasty or by creating your own."}),"\n",(0,i.jsx)(n.h2,{id:"hooking-into-lifecycle-events",children:"Hooking into lifecycle events"}),"\n",(0,i.jsxs)(n.p,{children:["To hook into a lifecycle event we need to tell Toasty what lifecycle events we would like to have on the service. We can do this by passing an ",(0,i.jsx)(n.code,{children:"Implements"})," table into the options with the names of the lifecycles we want to have. E.g:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local Toasty = require(path.to.Toasty)\n\nlocal myAwesomeService = {\n\tImplements = { "OnStart" }\n}\n\n--[[\n\tLifecycles need to have a function with the same name\n\tto call when that event goes off.\n]]\nfunction myAwesomeService:OnStart()\n\tprint("Hello World!")\nend\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n'})}),"\n",(0,i.jsx)(n.h2,{id:"toasty-provided-events",children:"Toasty provided events"}),"\n",(0,i.jsx)(n.h3,{id:"onstart",children:"OnStart"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"OnStart"})," is called when you call the ",(0,i.jsx)(n.code,{children:"Toasty.Bootstrap.Toast()"})," function. E.g:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- MyAwesomeService.luau\nlocal Toasty = require(path.to.Toasty)\n\nlocal myAwesomeService = {\n\tImplements = { "OnStart" }\n}\n\nfunction myAwesomeService:OnStart()\n\tprint("Hello World!")\nend\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n\n-- Runtime.server.luau\nToasty.Bootstrap.Toast() -- would print "Hello World!"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"oninit",children:"OnInit"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"You should not use OnInit unless you need to use the behavior that it has. Yielding in OnInit will delay calling Init/Start on all other singletons."})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"OnInit"})," is called when you call the ",(0,i.jsx)(n.code,{children:"Toasty.Bootstrap.Toast()"})," function but before the ",(0,i.jsx)(n.code,{children:"OnStart"})," lifecycle. E.g:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'-- MyAwesomeService.luau\nlocal Toasty = require(path.to.Toasty)\n\nlocal myAwesomeService = {\n\tImplements = { "OnInit", "OnStart" }\n}\n\nfunction myAwesomeService:OnStart()\n\tprint("Start")\nend\n\nfunction myAwesomeService:OnInit()\n\tprint("Init")\nend\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n\n-- Runtime.server.luau\nToasty.Bootstrap.Toast() -- would print "Init" then "Start"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-your-own",children:"Creating Your own"}),"\n",(0,i.jsxs)(n.p,{children:["You can create your own lifecycle events that get fired whenever you would like and do whatever you like. Here is a basic example of an ",(0,i.jsx)(n.code,{children:"OnHeartbeat"})," lifecycle event which also passes the ",(0,i.jsx)(n.code,{children:"deltaTime"})," with it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local RunService = game:GetService("RunService")\nlocal Toasty = require(path.to.Toasty)\n\n-- Create our lifecycle\nlocal onHeartbeatLifecycle = Toasty.Lifecycle.Create("OnHeartbeat")\n\nRunService.Heartbeat:Connect(function(dt: number)\n\t-- Dispatch lifecycle passing in delta time\n\tonHeartbeatLifecycle:Dispatch(dt)\nend)\n\n-- MyService.luau\nlocal Toasty = require(path.to.Toasty)\n\nlocal myAwesomeService = {\n\tImplements = { "OnHeartbeat" }\n}\n\nfunction myAwesomeService:OnHeartbeat(dt: number)\n\tprint(dt)\nend\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-handlers",children:"Custom Handlers"}),"\n",(0,i.jsxs)(n.p,{children:["By default Toasty provides you with a handler for lifecycle events which just calls the function on each singleton which implements that lifecycle event using ",(0,i.jsx)(n.code,{children:"task.spawn"}),". However you may want to do it your own way or add some logging, etc. You can do this by passing a handler function when you create your lifecycle event."]}),"\n",(0,i.jsxs)(n.p,{children:["This example simply calls each function without ",(0,i.jsx)(n.code,{children:"task.spawn"}),", the same way that ",(0,i.jsx)(n.code,{children:"OnInit"})," lifecycle works"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local RunService = game:GetService("RunService")\nlocal Toasty = require(path.to.Toasty)\n\nlocal onHeartbeatLifecycle = Toasty.Lifecycle.Create("OnHeartbeat", function(singletons, name: string, ...: any)\n\tfor _, v in singletons do\n\t\t-- Toasty makes sure the singleton has the function\n\t\t-- so its safe to assume it exists here\n\t\tlocal func = v[name]\n\t\tfunc(v, ...)\n\tend\nend)\n\nRunService.Heartbeat:Connect(function(dt: number)\n\tonHeartbeatLifecycle:Dispatch(dt)\nend)\n\n-- MyService.luau\nlocal Toasty = require(path.to.Toasty)\n\nlocal myAwesomeService = {\n\tImplements = { "OnHeartbeat" }\n}\n\nfunction myAwesomeService:OnHeartbeat(dt: number)\n\tprint(dt)\nend\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(96540);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);