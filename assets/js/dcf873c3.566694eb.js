"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2946],{147:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Guide/Singletons","title":"Singletons","description":"A singleton can be considered a Service (server) or Controller (client). Singletons are the backbone of Toasty, they are where most of your game logic will be. This page goes over the basics of creating a singleton and how they work!","source":"@site/docs/Guide/Singletons.md","sourceDirName":"Guide","slug":"/Guide/Singletons","permalink":"/Toasty/docs/Guide/Singletons","draft":false,"unlisted":false,"editUrl":"https://github.com/Its-a-bit-random/Toasty/edit/main/docs/Guide/Singletons.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","previous":{"title":"Toasty","permalink":"/Toasty/docs/intro"},"next":{"title":"Lifecycle","permalink":"/Toasty/docs/Guide/Lifecycle"}}');var i=o(74848),s=o(28453);const r={sidebar_position:1},l="Singletons",a={},c=[{value:"Creating a singleton",id:"creating-a-singleton",level:2},{value:"Lifecycle",id:"lifecycle",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"singletons",children:"Singletons"})}),"\n",(0,i.jsxs)(n.p,{children:["A singleton can be considered a ",(0,i.jsx)(n.code,{children:"Service"})," (server) or ",(0,i.jsx)(n.code,{children:"Controller"})," (client). Singletons are the backbone of Toasty, they are where most of your game logic will be. This page goes over the basics of creating a singleton and how they work!"]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-singleton",children:"Creating a singleton"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"local Toasty = require(path.to.Toasty)\n\n-- Server\nlocal myAwesomeService = {}\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n\n-- Client\nlocal myAwesomeController = {}\n\nToasty.Controller(myAwesomeController)\nreturn myAwesomeController\n"})}),"\n",(0,i.jsx)(n.p,{children:"Yep, that's all you need to do to create a singleton, from here you can hook into Lifecycles. The empty table passed is a options table which can be used to configure the singleton like implementing lifecycle."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Although you can create singletons via Toasty it is recommended you do not, and do what above does and define your singleton, then pass it to Toasty via ",(0,i.jsx)(n.code,{children:"Service"})," or ",(0,i.jsx)(n.code,{children:"Controller"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,i.jsxs)(n.p,{children:["We can implement lifecycle events by passing the name into the ",(0,i.jsx)(n.code,{children:"Implements"})," table within the options table with all the lifecycle events we would like to get on this service. Learn more ",(0,i.jsx)(n.a,{href:"/Toasty/docs/Guide/Lifecycle",children:"here"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'local Toasty = require(path.to.Toasty)\n\nlocal myAwesomeService = {\n\tImplements = { "OnStart" }\n}\n\nfunction myAwesomeService:OnStart()\n\tprint("Hello World!")\nend\n\nToasty.Service(myAwesomeService)\nreturn myAwesomeService\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(96540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);