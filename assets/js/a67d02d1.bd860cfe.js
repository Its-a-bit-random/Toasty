"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1984],{35648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Guide/HelloWorld","title":"Hello World","description":"Lets now write your very own Starter script. You will need to create one for both the client and server. This will only cover the server side but the client side is pretty much identical.","source":"@site/docs/Guide/HelloWorld.md","sourceDirName":"Guide","slug":"/Guide/HelloWorld","permalink":"/Toasty/docs/Guide/HelloWorld","draft":false,"unlisted":false,"editUrl":"https://github.com/Its-a-bit-random/Toasty/edit/main/docs/Guide/HelloWorld.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Getting Started","permalink":"/Toasty/docs/Guide/GettingStarted"},"next":{"title":"Dependencies","permalink":"/Toasty/docs/Guide/Dependencies"}}');var o=n(74848),i=n(28453);const s={sidebar_position:2},l="Hello World",a={},c=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"hello-world",children:"Hello World"})}),"\n",(0,o.jsx)(t.p,{children:"Lets now write your very own Starter script. You will need to create one for both the client and server. This will only cover the server side but the client side is pretty much identical."}),"\n",(0,o.jsx)(t.p,{children:'Keep in mind that a "Singleton" is a way of saying "Service" or "Controller" since they are the same with just a different name on the Server and Client.'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-lua",children:"-- Require --\r\nlocal Toasty = require(path.to.toasty)\r\n\r\n-- Config --\r\n--[[\r\n\tThis is where configs like Feature Flags will go\r\n]]\r\n\r\n-- Networking --\r\n--[[\r\n\tThis will be covered later when we go over networking\r\n]]\r\n\r\n-- Loading --\r\n-- Now we can load our actual modules\r\nToasty.Bootstrap.LoadSingletonModules(script.Parent.Services, true)\r\n--[[\r\n\tWhen using LoadSingletonModules, Toasty automatically handles creating and registering\r\n\tsingletons. This means all your modules should return singletons, if not, please\r\n\trestrucutre or call Toasty.Service or Toasty.Controller in every module. Before\r\n\treturning\r\n]]\r\n\r\n-- Toast --\r\n-- Toasting is the same as calling Knit.Start(). It kicks off all singleton's OnStart and OnInit lifecycles (more info on that later)\r\nToasty.Bootstrap.Toast()\n"})}),"\n",(0,o.jsx)(t.p,{children:'Now to create our actual Service. Create a folder next to your loader server script called "Services" and create a module script inside.'}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-lua",children:'-- Services/MyService.luau\r\nlocal MyFirstService = {\r\n\tImplements = { "OnStart" };\r\n}\r\n\r\nfunction MyFirstService:OnStart()\r\n\tprint("Hello World!")\r\nend\r\n\r\nreturn MyFirstService\n'})}),"\n",(0,o.jsx)(t.p,{children:"Ignore the implements table for now as we will go into Life-cycles in the next page. However running this you will get Hello World printing in console."}),"\n",(0,o.jsx)(t.p,{children:"Now its your turn, try doing the setup for the client and see if you can get that to print hello world too. Heads up though, on the client services are called Controllers!"})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(96540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);