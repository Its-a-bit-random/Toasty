"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5154],{79732:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Guide/Dependencies","title":"Dependencies","description":"Dependencies","source":"@site/docs/Guide/Dependencies.md","sourceDirName":"Guide","slug":"/Guide/Dependencies","permalink":"/Toasty/docs/Guide/Dependencies","draft":false,"unlisted":false,"editUrl":"https://github.com/Its-a-bit-random/Toasty/edit/main/docs/Guide/Dependencies.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Hello World","permalink":"/Toasty/docs/Guide/HelloWorld"},"next":{"title":"Lifecycle","permalink":"/Toasty/docs/Guide/Lifecycle"}}');var r=o(74848),s=o(28453);const i={sidebar_position:3},d="Dependencies",c={},a=[{value:"Dependencies",id:"dependencies-1",level:2},{value:"Custom load order",id:"custom-load-order",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dependencies",children:"Dependencies"})}),"\n",(0,r.jsx)(n.h2,{id:"dependencies-1",children:"Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The Toasty dependency system is completely optional but is recommended"})," since it ensures your singletons are loaded and started in the correct order."]}),"\n",(0,r.jsx)(n.p,{children:"To tell Toasty your singleton has a dependency on another singleton simply pass it into a dependencies table of your singleton. Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local MyOtherService = require(path.to.OtherService)\r\n\r\nlocal MyService = {\r\n\tImplements = { "OnStart" };\r\n\tDependencies = { MyOtherService };\r\n}\r\n\r\nfunction MyService:OnStart()\r\n\tprint("Hello World!")\r\n\tMyOtherService:Foo()\r\nend\r\n\r\nreturn MyService\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now toasty will call ",(0,r.jsx)(n.code,{children:"OnInit"})," for MyOtherService before ",(0,r.jsx)(n.code,{children:"OnInit"})," for MyService. Same with for ",(0,r.jsx)(n.code,{children:"OnStart"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"custom-load-order",children:"Custom load order"}),"\n",(0,r.jsxs)(n.p,{children:["You can pass a custom load order into singletons using ",(0,r.jsx)(n.code,{children:"LoadOrder"}),". By default all singletons are on load order 2. The higher the ",(0,r.jsx)(n.code,{children:"LoadOrder"})," the later the singleton will load. If you want some singletons to always load before any other ones you can pass in a ",(0,r.jsx)(n.code,{children:"LoadOrder"})," of 1."]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:["Toasty puts priority on loading dependencies in the right order. So if your singleton has a ",(0,r.jsx)(n.code,{children:"LoadOrder"})," of 2 and one of its dependencies has a ",(0,r.jsx)(n.code,{children:"LoadOrder"})," = 3, that dependency will still be started before, ignoring the ",(0,r.jsx)(n.code,{children:"LoadOrder"}),"."]}),(0,r.jsx)(n.p,{children:"At some point in the future this may become config to change how this works but for now this is how Toasty handles it."})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>d});var t=o(96540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);